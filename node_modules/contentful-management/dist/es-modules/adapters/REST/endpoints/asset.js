const _excluded = ["asset", "locale", "options"],
  _excluded2 = ["asset", "options"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { errorHandler } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { getUploadHttpClient } from '../../../upload-http-client';
import * as raw from './raw';
import { create as createUpload } from './upload';
import { normalizeSelect } from './utils';
export const get = (http, params, rawData, headers) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const getMany = (http, params, rawData, headers) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const update = (http, params, rawData, headers) => {
  var _rawData$sys$version;
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data, {
    headers: _objectSpread({
      'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
    }, headers)
  });
};
export const del = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`);
};
export const publish = (http, params, rawData) => {
  var _rawData$sys$version2;
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`, null, {
    headers: {
      'X-Contentful-Version': (_rawData$sys$version2 = rawData.sys.version) !== null && _rawData$sys$version2 !== void 0 ? _rawData$sys$version2 : 0
    }
  });
};
export const unpublish = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`);
};
export const archive = (http, params) => {
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
};
export const unarchive = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
};
export const create = (http, params, rawData) => {
  const data = copy(rawData);
  return raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, data);
};
export const createWithId = (http, params, rawData) => {
  const data = copy(rawData);
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data);
};
export const createFromFiles = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (http, params, data) {
    const httpUpload = getUploadHttpClient(http, {
      uploadTimeout: params.uploadTimeout
    });
    const file = data.fields.file;
    return Promise.all(Object.keys(file).map( /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(function* (locale) {
        const _file$locale = file[locale],
          contentType = _file$locale.contentType,
          fileName = _file$locale.fileName;
        return createUpload(httpUpload, params, file[locale]).then(upload => {
          return {
            [locale]: {
              contentType,
              fileName,
              uploadFrom: {
                sys: {
                  type: 'Link',
                  linkType: 'Upload',
                  id: upload.sys.id
                }
              }
            }
          };
        });
      });
      return function (_x4) {
        return _ref2.apply(this, arguments);
      };
    }())).then(uploads => {
      const file = uploads.reduce((fieldsData, upload) => _objectSpread(_objectSpread({}, fieldsData), upload), {});
      const asset = _objectSpread(_objectSpread({}, data), {}, {
        fields: _objectSpread(_objectSpread({}, data.fields), {}, {
          file
        })
      });
      return create(http, params, asset);
    }).catch(errorHandler);
  });
  return function createFromFiles(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Asset processing
 */

const ASSET_PROCESSING_CHECK_WAIT = 3000;
const ASSET_PROCESSING_CHECK_RETRIES = 10;
function checkIfAssetHasUrl(_x5, _x6, _x7) {
  return _checkIfAssetHasUrl.apply(this, arguments);
}
function _checkIfAssetHasUrl() {
  _checkIfAssetHasUrl = _asyncToGenerator(function* (http, params, {
    resolve,
    reject,
    locale,
    processingCheckWait = ASSET_PROCESSING_CHECK_WAIT,
    processingCheckRetries = ASSET_PROCESSING_CHECK_RETRIES,
    checkCount = 0
  }) {
    return get(http, params).then(asset => {
      if (asset.fields.file[locale].url) {
        resolve(asset);
      } else if (checkCount === processingCheckRetries) {
        const error = new Error();
        error.name = 'AssetProcessingTimeout';
        error.message = 'Asset is taking longer then expected to process.';
        reject(error);
      } else {
        checkCount++;
        setTimeout(() => checkIfAssetHasUrl(http, params, {
          resolve: resolve,
          reject: reject,
          locale: locale,
          checkCount: checkCount,
          processingCheckWait,
          processingCheckRetries
        }), processingCheckWait);
      }
    });
  });
  return _checkIfAssetHasUrl.apply(this, arguments);
}
export const processForLocale = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* (http, _ref3) {
    let asset = _ref3.asset,
      locale = _ref3.locale,
      _ref3$options = _ref3.options,
      _ref3$options2 = _ref3$options === void 0 ? {} : _ref3$options,
      processingCheckRetries = _ref3$options2.processingCheckRetries,
      processingCheckWait = _ref3$options2.processingCheckWait,
      params = _objectWithoutProperties(_ref3, _excluded);
    return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${asset.sys.id}/files/${locale}/process`, null, {
      headers: {
        'X-Contentful-Version': asset.sys.version
      }
    }).then(() => {
      return new Promise((resolve, reject) => checkIfAssetHasUrl(http, {
        spaceId: params.spaceId,
        environmentId: params.environmentId,
        assetId: asset.sys.id
      }, {
        resolve,
        reject,
        locale,
        processingCheckWait,
        processingCheckRetries
      }));
    });
  });
  return function processForLocale(_x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();
export const processForAllLocales = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(function* (http, _ref5) {
    let asset = _ref5.asset,
      _ref5$options = _ref5.options,
      options = _ref5$options === void 0 ? {} : _ref5$options,
      params = _objectWithoutProperties(_ref5, _excluded2);
    const locales = Object.keys(asset.fields.file || {});
    let mostUpToDateAssetVersion = asset;

    // Let all the locales process
    // Since they all resolve at different times,
    // we need to pick the last resolved value
    // to reflect the most recent state
    const allProcessingLocales = locales.map(locale => processForLocale(http, _objectSpread(_objectSpread({}, params), {}, {
      asset,
      locale,
      options
    })).then(result => {
      // Side effect of always setting the most up to date asset version
      // The last one to call this will be the last one that finished
      // and thus the most up to date
      mostUpToDateAssetVersion = result;
    }));
    return Promise.all(allProcessingLocales).then(() => mostUpToDateAssetVersion);
  });
  return function processForAllLocales(_x10, _x11) {
    return _ref6.apply(this, arguments);
  };
}();