{"mappings":";;;;;;;;;;AAce,wDACX,QAA+B,EAC/B,KAA6C,EACxB;IACrB,MAAM,SAAS,GAAsD,OAAO,WAAmB,GAAK;QAChG,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;YAAC,GAAG,KAAK;YAAE,IAAI,EAAE,WAAW;SAAC,CAAC,AAAC;QAC7D,MAAM,MAAM,GAAG,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,AAAC;QACjD,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,EACrB,OAAO;eAAI,MAAM,CAAC,KAAK;eAAM,MAAM,SAAS,CAAC,MAAM,CAAC;SAAE,CAAC;aAEvD,OAAO,MAAM,CAAC,KAAK,CAAC;KAE3B,AAAC;IACF,OAAO,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;CACtC","sources":["src/index.ts"],"sourcesContent":["type CollectionProp<ItemType> = {\n    total: number,\n    items: ItemType[]\n}\n\ntype CollectionQuery = {\n    skip?: number,\n    limit?: number\n}\n\ntype CollectionFuncResponse<TItem> = Promise<CollectionProp<TItem>>;\n\ntype CollectionFunc<TItem> = (query: CollectionQuery) => CollectionFuncResponse<TItem>;\n\nexport default async function getContentfulCollection<TItem>(\n    endpoint: CollectionFunc<TItem>,\n    query?: CollectionQuery & Record<string, any>,\n): Promise<Array<TItem>> {\n    const getResult: (currentSkip: number) => Promise<any[] | TItem[]> = async (currentSkip: number) => {\n        const result = await endpoint({...query, skip: currentSkip});\n        const length = currentSkip + result.items.length;\n        if (result.total > length) {\n            return [...result.items, ...(await getResult(length))];\n        } else {\n            return result.items;\n        }\n    };\n    return getResult(query?.skip || 0);\n}\n"],"names":[],"version":3,"file":"main.js.map"}