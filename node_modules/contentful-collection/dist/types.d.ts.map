{"mappings":"AAAA,oBAAoB,QAAQ,IAAI;IAC5B,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,QAAQ,EAAE,CAAA;CACpB,CAAA;AAED,uBAAuB;IACnB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,KAAK,CAAC,EAAE,MAAM,CAAA;CACjB,CAAA;AAED,4BAA4B,KAAK,IAAI,OAAO,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC;AAEpE,oBAAoB,KAAK,IAAI,CAAC,KAAK,EAAE,eAAe,KAAK,uBAAuB,KAAK,CAAC,CAAC;AAEvF,gDAAsD,KAAK,EACvD,QAAQ,EAAE,eAAe,KAAK,CAAC,EAC/B,KAAK,CAAC,EAAE,eAAe,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,GAC9C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAWvB","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"type CollectionProp<ItemType> = {\n    total: number,\n    items: ItemType[]\n}\n\ntype CollectionQuery = {\n    skip?: number,\n    limit?: number\n}\n\ntype CollectionFuncResponse<TItem> = Promise<CollectionProp<TItem>>;\n\ntype CollectionFunc<TItem> = (query: CollectionQuery) => CollectionFuncResponse<TItem>;\n\nexport default async function getContentfulCollection<TItem>(\n    endpoint: CollectionFunc<TItem>,\n    query?: CollectionQuery & Record<string, any>,\n): Promise<Array<TItem>> {\n    const getResult: (currentSkip: number) => Promise<any[] | TItem[]> = async (currentSkip: number) => {\n        const result = await endpoint({...query, skip: currentSkip});\n        const length = currentSkip + result.items.length;\n        if (result.total > length) {\n            return [...result.items, ...(await getResult(length))];\n        } else {\n            return result.items;\n        }\n    };\n    return getResult(query?.skip || 0);\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}