import { PlainClientAPI } from 'contentful-management';
import { WebhookCallDetailsProps } from 'contentful-management/dist/typings/entities/webhook';

type AppActionCategoryParams = {
    Entries: {
        entryIds: string;
    };
    CreateChangeset: {
        targetEnvironmentId: string;
        sourceEnvironmentId: string;
    };
    ConsumeChangeset: {
        targetEnvironmentId: string;
        changesetRef: string;
        subset?: string;
    };
};
declare enum ResponseStatus {
    Success = "success",
    RePoll = "re-poll",
    Aborted = "aborted",
    Error = "error"
}
type CallAppActionParams = {
    abortSignal: AbortSignal;
    api: PlainClientAPI;
    appDefinitionId: string;
};
type AppActionResponseError = {
    errorMessage: string;
};
type AppActionResponseSuccess<Result> = {
    message: Result;
};
type AppActionResponse<Result = unknown> = AppActionResponseError | AppActionResponseSuccess<Result>;
type ActionCallResponse<Result = unknown> = {
    callId: string;
    result: AppActionResponse<Result>;
};

/**
 * @typedef {Object} GetAppActionCallDetailsProps
 * @property {PlainClientAPI} api - Contentful Management API
 * @property {string} appActionId - App Action ID
 * @property {string} callId - Call ID
 * @property {string} [spaceId=] - Space ID
 * @property {string} [environmentId=] - Environment ID
 */
type GetAppActionCallDetailsProps = {
    api: PlainClientAPI;
    appActionId: string;
    callId: string;
    spaceId?: string;
    environmentId?: string;
};
type DetailsResult = {
    status: ResponseStatus.RePoll;
} | PolledDetailsResult;
type PolledDetailsResult = {
    status: ResponseStatus.Aborted;
} | {
    status: ResponseStatus.Success;
    result: WebhookCallDetailsProps;
} | {
    status: ResponseStatus.Error;
    error: unknown;
};
type GeneratedDetailsCall = () => Promise<DetailsResult>;
/**
 * Get the details of an App Action call
 * @param {GetAppActionCallDetailsProps} props - Object containing the parameters
 * @return {GeneratedDetailsCall} - Function that returns the details of the App Action call
 */
declare function getAppActionCallDetails({ api, appActionId, callId, spaceId, environmentId, }: GetAppActionCallDetailsProps): GeneratedDetailsCall;

type BaseParameters = Record<string, string>;
/**
 * @typedef {Object} AdditionalParameters
 * @property {string} spaceId - Space ID
 * @property {string} environmentId - Environment ID
 */
type AdditionalParameters = {
    spaceId: string;
    environmentId: string;
};
/**
 * @typedef {Object} CallAppActionProps
 * @property {PlainClientAPI} api - Contentful Management API
 * @property {string} appActionId - App Action ID
 * @property {string} appDefinitionId - App Definition ID
 * @property {Parameters} parameters - App Action parameters, can be fully typed with AppActionCategoryParams<'<appActionCategory>'>
 * @property {AbortSignal} [abortSignal=] - Abort signal
 * @property {number} [timeout=10000] - Max timeout for the call and retrieving the result
 * @property {number} [retryInterval=1000] - Interval between retries
 * @property {AdditionalParameters} [additionalParameters=] - Additional parameters in case they are not set in the client
 */
type CallAppActionProps<Parameters extends BaseParameters = BaseParameters> = {
    api: PlainClientAPI;
    appDefinitionId: string;
    appActionId: string;
    parameters: Parameters;
    abortSignal?: AbortSignal;
    timeout?: number;
    retryInterval?: number;
    additionalParameters?: AdditionalParameters;
};
/**
 * Call an App Action and get the result
 *
 * @typedef {Object} ActionCallResult
 * @property {ActionCallResponse<TMessage>} result - Result of the App Action
 * @property {string} callId - Call ID
 *
 * @param {CallAppActionProps} props - Object containing the parameters
 * @return {Promise<ActionCallResult>} - Result of the App Action of type TMessage
 *
 * @template TMessage - Type of the message returned by the App Action
 */
declare function callAppAction<Parameters extends BaseParameters, TMessage = unknown>({ api, appActionId, appDefinitionId, parameters, timeout, retryInterval, abortSignal, additionalParameters, }: CallAppActionProps<Parameters>): Promise<ActionCallResponse<TMessage>>;

/**
 * @typedef {Object} CallAppActionResultProps
 * @property {PlainClientAPI} api - Contentful Management API
 * @property {string} appActionId - App Action ID
 * @property {string} callId - Call ID
 * @property {Parameters} parameters - App Action parameters, can be fully typed with AppActionCategoryParams<'<appActionCategory>'>
 * @property {AbortSignal} [abortSignal=] - Abort signal
 * @property {number} [timeout=10000] - Max timeout for the call and retrieving the result
 * @property {number} [retryInterval=1000] - Interval between retries
 */
type CallAppActionResultProps = {
    api: PlainClientAPI;
    appActionId: string;
    callId: string;
    spaceId?: string;
    environmentId?: string;
    abortSignal?: AbortSignal;
    timeout?: number;
    retryInterval?: number;
};
/**
 * Call an App Action and get the result
 *
 * @typedef {Object} ActionCallResult
 * @property {ActionCallResponse<Result>} result - Result of the App Action
 * @property {string} callId - Call ID
 *
 * @param {CallAppActionResultProps} props - Object containing the parameters
 * @return {Promise<ActionCallResult>} - Result of the App Action of type TMessage
 *
 * @template Result - Type of the message returned by the App Action
 */
declare function callAppActionResult<Result = any>({ api, appActionId, spaceId, environmentId, callId, timeout, retryInterval, abortSignal, }: CallAppActionResultProps): Promise<AppActionResponse<Result>>;

declare class ContentfulError extends Error {
    data: any;
    constructor(message: string, data?: any);
}
declare class NotFoundError extends ContentfulError {
}
declare class ParsingError extends ContentfulError {
}
declare class AppActionCallError extends ContentfulError {
}

declare function safeParse(body: string): any;
declare function isResultWithError<T>(result: AppActionResponse<T>): result is AppActionResponseError;

export { ActionCallResponse, AppActionCallError, AppActionCategoryParams, AppActionResponse, AppActionResponseError, AppActionResponseSuccess, CallAppActionParams, ContentfulError, DetailsResult, NotFoundError, ParsingError, PolledDetailsResult, ResponseStatus, callAppAction, callAppActionResult, getAppActionCallDetails, isResultWithError, safeParse };
