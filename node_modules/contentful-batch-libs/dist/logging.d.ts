/// <reference types="node" />
export function formatLogMessageOneLine(logMessage: any): any;
export function formatLogMessageLogfile(logMessage: any): any;
export function displayErrorLog(errorLog: any): void;
/**
 * Write all log messages instead of infos to the error log file
 * @param {import('node:fs').PathLike} destination
 * @param {Record<string, unknown>[]} errorLog
 * @returns {Promise<void>}
 */
export function writeErrorLogFile(destination: import('node:fs').PathLike, errorLog: Record<string, unknown>[]): Promise<void>;
/**
 * Init listeners for log messages, transform them into proper format and logs/displays them
 * @param {Record<string,unknown>[]} log
 * @returns {Promise<void>}
 */
export function setupLogging(log: Record<string, unknown>[]): Promise<void>;
/**
 * Format log message to display them as task status
 * @template {Ctx}
 * @param {import('listr').ListrTaskWrapper<Ctx>} task
 */
export function logToTaskOutput(task: any): () => void;
export const logEmitter: EventEmitter;
import EventEmitter from 'node:events';
