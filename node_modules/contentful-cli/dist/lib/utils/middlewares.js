"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const yargs = require('yargs');
const { getContext } = require('../context');
const config = require('../config');
const { assertLoggedIn, assertSpaceIdProvided } = require('./assertions');
const { handleAsyncError: handle } = require('./async');
module.exports.getCommand = () => {
    const { fullCommands } = yargs.getContext();
    const cmd = fullCommands.join(' ');
    return { cmd };
};
module.exports.buildContext = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const { managementToken, spaceId, activeSpaceId, environmentId, activeEnvironmentId, insecure, host, rawProxy, proxy } = argv;
    const context = yield getContext();
    if (managementToken) {
        context.managementToken = managementToken;
    }
    const space = spaceId || activeSpaceId;
    if (space) {
        context.activeSpaceId = space;
    }
    const environment = environmentId || activeEnvironmentId;
    if (environment) {
        context.activeEnvironmentId = environment;
    }
    if (!context.activeEnvironmentId) {
        context.activeEnvironmentId = 'master';
    }
    // Only included if explicitly set
    if (typeof insecure !== 'undefined') {
        context.insecure = insecure.toString() === 'true';
    }
    if (host) {
        context.host = host;
    }
    if (!context.host) {
        context.host = 'api.contentful.com';
    }
    if (rawProxy !== undefined) {
        context.rawProxy = rawProxy;
    }
    if (proxy) {
        context.proxy = proxy;
    }
    return { context };
});
module.exports.assertContext = (params) => __awaiter(void 0, void 0, void 0, function* () {
    const { cmd, context } = params;
    const { noAuthNeeded, noSpaceIdNeeded } = config;
    if (cmd && !noAuthNeeded.includes(cmd)) {
        handle(assertLoggedIn)(context);
    }
    if (cmd && !noSpaceIdNeeded.includes(cmd)) {
        handle(assertSpaceIdProvided)(context);
    }
});
