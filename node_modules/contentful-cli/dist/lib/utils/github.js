"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require('path');
const zlib = require('zlib');
const axios = require('axios');
const Listr = require('listr');
const tar = require('tar');
const mkdirp = require('mkdirp');
function getLatestGitHubRelease(repo, destination) {
    return new Listr([
        {
            title: `Fetching release information of ${repo}`,
            task: (ctx) => __awaiter(this, void 0, void 0, function* () {
                const response = yield axios({
                    url: `https://api.github.com/repos/${repo}/releases/latest`
                });
                ctx.latestReleaseInfo = response.data;
            })
        },
        {
            title: `Downloading latest release of ${repo}`,
            task: (ctx) => __awaiter(this, void 0, void 0, function* () {
                ctx.latestReleaseZipLocation = path.join(destination, 'latest-release.tar.gz');
                const response = yield axios({
                    url: ctx.latestReleaseInfo.tarball_url,
                    responseType: 'stream'
                });
                ctx.latestReleaseTarballStream = response.data;
            })
        },
        {
            title: `Unpacking latest release of ${repo}`,
            task: (ctx) => __awaiter(this, void 0, void 0, function* () {
                yield mkdirp(destination);
                return new Promise((resolve, reject) => {
                    try {
                        ctx.latestReleaseTarballStream
                            .pipe(zlib.Unzip())
                            .pipe(new tar.Unpack({
                            cwd: destination,
                            strip: 1
                        }))
                            .on('error', reject)
                            .on('close', resolve);
                    }
                    catch (err) {
                        reject(err);
                    }
                });
            })
        }
    ]);
}
module.exports.getLatestGitHubRelease = getLatestGitHubRelease;
