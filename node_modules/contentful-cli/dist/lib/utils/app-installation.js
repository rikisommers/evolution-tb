"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAndInstallAppInEnvironments = exports.installApp = exports.isAppInstalled = void 0;
const actions_1 = require("./actions");
const log_1 = require("./log");
/**
 * Checks if a specified app is installed in an environment
 */
function isAppInstalled(client, { spaceId, environmentId, appId }) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield client.appInstallation.get({
                spaceId,
                environmentId,
                appDefinitionId: appId
            });
            return true;
        }
        catch (error) {
            // The CMA client will throw if no app definition was found
            if ((error === null || error === void 0 ? void 0 : error.name) === 'NotFound') {
                return false;
            }
            else {
                throw error;
            }
        }
    });
}
exports.isAppInstalled = isAppInstalled;
function installApp(client, { spaceId, environmentId, appId }) {
    return __awaiter(this, void 0, void 0, function* () {
        const environments = Array.isArray(environmentId)
            ? environmentId
            : [environmentId];
        for (const environmentId of environments) {
            yield client.raw.put(`/spaces/${spaceId}/environments/${environmentId}/app_installations/${appId}`, {
                parameters: {}
            });
        }
    });
}
exports.installApp = installApp;
const promptAppInstallationInEnvironment = (client, spaceId, environmentId, appId) => __awaiter(void 0, void 0, void 0, function* () {
    (0, log_1.warning)(`The Merge app is not installed in the environment with id: ${environmentId}`);
    const userConfirmation = yield (0, actions_1.confirmation)(`Do you want to install the Merge app in the environment with id: ${environmentId}`);
    if (!userConfirmation) {
        return false;
    }
    yield installApp(client, {
        spaceId,
        environmentId,
        appId
    });
    return true;
});
const checkAndInstallAppInEnvironments = (client, spaceId, environmentIds, appId, continueWithoutPrompt) => __awaiter(void 0, void 0, void 0, function* () {
    const appInstallations = {
        source: {
            id: environmentIds[0],
            installed: yield isAppInstalled(client, {
                spaceId: spaceId,
                environmentId: environmentIds[0],
                appId
            })
        },
        target: {
            id: environmentIds[1],
            installed: yield isAppInstalled(client, {
                spaceId: spaceId,
                environmentId: environmentIds[1],
                appId
            })
        }
    };
    if (appInstallations.source.installed && appInstallations.target.installed) {
        return true;
    }
    // User has passed the --yes flag
    if (continueWithoutPrompt) {
        // Install the app in both environments. If it's already installed it will just continue.
        yield installApp(client, {
            spaceId,
            environmentId: environmentIds,
            appId
        });
    }
    else {
        if (!appInstallations.source.installed &&
            !appInstallations.target.installed) {
            (0, log_1.warning)(`The Merge app is not installed in any of the environments. Environment ids: ${environmentIds[0]}, ${environmentIds[1]}`);
            const userConfirmation = yield (0, actions_1.confirmation)(`Do you want to install the Merge app in both environments?`);
            if (!userConfirmation) {
                return false;
            }
            yield installApp(client, {
                spaceId,
                environmentId: environmentIds,
                appId
            });
        }
        else {
            for (const { installed, id } of Object.values(appInstallations)) {
                if (!installed) {
                    const prompt = yield promptAppInstallationInEnvironment(client, spaceId, id, appId);
                    if (!prompt) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
});
exports.checkAndInstallAppInEnvironments = checkAndInstallAppInEnvironments;
