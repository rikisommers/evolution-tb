"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareMergeCommand = void 0;
const app_actions_config_1 = require("../app-actions-config");
const app_installation_1 = require("../app-installation");
const contentful_clients_1 = require("../contentful-clients");
function prepareMergeCommand({ context, sourceEnvironmentId, targetEnvironmentId, yes }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId, host } = context;
        const mergeAppId = (0, app_actions_config_1.getAppDefinitionId)(host);
        const client = yield (0, contentful_clients_1.createPlainClient)({
            accessToken: managementToken
        });
        if (sourceEnvironmentId === targetEnvironmentId) {
            throw new Error('Source and target environments cannot be the same.');
        }
        const appInstalled = yield (0, app_installation_1.checkAndInstallAppInEnvironments)(client, activeSpaceId, [sourceEnvironmentId, targetEnvironmentId], mergeAppId, !!yes);
        if (!appInstalled) {
            throw new Error('Merge app could not be installed in the environments.');
        }
        return { activeSpaceId, host, client, mergeAppId };
    });
}
exports.prepareMergeCommand = prepareMergeCommand;
