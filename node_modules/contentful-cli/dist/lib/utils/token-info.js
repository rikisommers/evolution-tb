"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenInfo = void 0;
const boxen_1 = __importDefault(require("boxen"));
const chalk_1 = __importDefault(require("chalk"));
const context_1 = require("../context");
const tokenInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    const configFilePath = yield (0, context_1.getConfigPath)();
    const { managementToken } = yield (0, context_1.getContext)();
    if (!configFilePath || !managementToken)
        return;
    console.log((0, boxen_1.default)(`Your management token: ${chalk_1.default.dim(managementToken)} \nStored at: ${chalk_1.default.dim(configFilePath)}`, {
        padding: 1,
        borderStyle: 'round',
        textAlignment: 'left',
        margin: { left: 0, right: 0, top: 0.5, bottom: 0.5 },
        borderColor: 'cyan'
    }));
});
exports.tokenInfo = tokenInfo;
