"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Gets all the existing entities based on pagination parameters.
 * The first call will have no aggregated response. Subsequent calls will
 * concatenate the new responses to the original one.
 */
module.exports = function paginate({ client, method, skip = 0, limit = 100, aggregatedResponse = null, query = null }) {
    return __awaiter(this, void 0, void 0, function* () {
        const fullQuery = Object.assign({}, {
            limit,
            skip: skip,
            order: 'sys.createdAt,sys.id'
        }, query);
        const response = yield client[method](fullQuery);
        if (!aggregatedResponse) {
            aggregatedResponse = response;
        }
        else {
            aggregatedResponse.items = [...aggregatedResponse.items, ...response.items];
        }
        if (skip + limit < response.total) {
            return paginate({
                client,
                method,
                skip: skip + limit,
                aggregatedResponse,
                query
            });
        }
        return aggregatedResponse || { items: [] };
    });
};
