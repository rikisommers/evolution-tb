"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExportMigration = exports.callCreateChangesetWithResponse = exports.callCreateChangeset = exports.toJSMigration = void 0;
const app_action_utils_1 = require("@contentful/app-action-utils");
const SubsetTransform = {
    to: (input) => input.join(','),
    from: (input) => {
        if (!input) {
            return [];
        }
        return input.replace(/\s+/g, '').split(',');
    }
};
function toJSMigration(tsMigration) {
    return tsMigration.replace('(migration: any, context: any)', '(migration, context)');
}
exports.toJSMigration = toJSMigration;
const callCreateChangeset = ({ api, appDefinitionId, appActionId, parameters, environmentId, spaceId }) => __awaiter(void 0, void 0, void 0, function* () {
    const params = Object.assign(Object.assign({ appDefinitionId,
        appActionId }, (environmentId ? { environmentId } : {})), (spaceId ? { spaceId } : {}));
    const createResponse = yield api.appActionCall.create(params, { parameters });
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return createResponse.sys.id;
});
exports.callCreateChangeset = callCreateChangeset;
const callCreateChangesetWithResponse = ({ api, appDefinitionId, appActionId, parameters, environmentId, spaceId }) => __awaiter(void 0, void 0, void 0, function* () {
    const params = Object.assign(Object.assign({ appDefinitionId,
        appActionId }, (environmentId ? { environmentId } : {})), (spaceId ? { spaceId } : {}));
    return yield api.appActionCall.createWithResponse(params, { parameters });
});
exports.callCreateChangesetWithResponse = callCreateChangesetWithResponse;
const getExportMigration = ({ api, appDefinitionId, appActionId, spaceId, targetEnvironmentId, changesetRef, subset, abortSignal }) => __awaiter(void 0, void 0, void 0, function* () {
    const { result } = yield (0, app_action_utils_1.callAppAction)({
        api,
        appDefinitionId,
        appActionId,
        parameters: {
            targetEnvironmentId,
            changesetRef,
            subset: subset ? SubsetTransform.to(subset) : undefined
        },
        abortSignal,
        additionalParameters: {
            environmentId: targetEnvironmentId,
            spaceId
        }
    });
    if ((0, app_action_utils_1.isResultWithError)(result)) {
        throw new Error(result.errorMessage);
    }
    return result.message;
});
exports.getExportMigration = getExportMigration;
