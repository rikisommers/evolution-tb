"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { createClient } = require('contentful-management');
const { version } = require('../../package.json');
const { getContext } = require('../context');
const { agentFromProxy } = require('./proxy');
function createManagementClient(params) {
    return __awaiter(this, void 0, void 0, function* () {
        params.application = `contentful.cli/${version}`;
        const context = yield getContext();
        const { rawProxy, proxy, host, insecure } = context;
        const proxyConfig = {};
        if (!rawProxy) {
            const { httpsAgent } = agentFromProxy(proxy);
            proxyConfig.httpsAgent = httpsAgent;
        }
        else {
            proxyConfig.proxy = proxy;
        }
        return createClient(Object.assign(Object.assign(Object.assign({}, params), proxyConfig), { host, insecure }));
    });
}
function createPlainClient(params, defaults = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        params.application = `contentful.cli/${version}`;
        const context = yield getContext();
        const { rawProxy, proxy, host, insecure } = context;
        const proxyConfig = {};
        if (!rawProxy) {
            const { httpsAgent } = agentFromProxy(proxy);
            proxyConfig.httpsAgent = httpsAgent;
        }
        else {
            proxyConfig.proxy = proxy;
        }
        return createClient(Object.assign(Object.assign(Object.assign({}, params), proxyConfig), { host, insecure }), { type: 'plain', defaults });
    });
}
module.exports = { createManagementClient, createPlainClient };
