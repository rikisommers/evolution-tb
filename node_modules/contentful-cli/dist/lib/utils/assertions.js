"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { getContext } = require('../context');
const { PreconditionFailedError } = require('./error');
const { highlightStyle } = require('./styles');
function assertLoggedIn({ managementToken, paramName } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let noToken = !managementToken;
        if (!managementToken) {
            const context = yield getContext();
            noToken = !context.managementToken;
        }
        paramName = paramName || '--management-token';
        if (noToken) {
            throw new PreconditionFailedError(`You have to be logged in to do this.\nYou can log in via ${highlightStyle('contentful login')}\nOr provide a management token via ${paramName} argument`);
        }
    });
}
module.exports.assertLoggedIn = assertLoggedIn;
function assertSpaceIdProvided({ spaceId, activeSpaceId } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let noSpaceId = !spaceId && !activeSpaceId;
        if (noSpaceId) {
            const context = yield getContext();
            noSpaceId = !context.activeSpaceId;
        }
        if (noSpaceId) {
            throw new PreconditionFailedError(`You need to provide a space id. You can pass it via the ${highlightStyle('--space-id')} parameter or by running ${highlightStyle('contentful space use')}`);
        }
    });
}
module.exports.assertSpaceIdProvided = assertSpaceIdProvided;
