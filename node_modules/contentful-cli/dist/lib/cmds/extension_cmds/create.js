"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { handleAsyncError: handle } = require('../../utils/async');
const { createManagementClient } = require('../../utils/contentful-clients');
const { copyright } = require('../../utils/copyright');
const { successEmoji } = require('../../utils/emojis');
const { getHeadersFromOption } = require('../../utils/headers');
const { success } = require('../../utils/log');
const { assertExtensionValuesProvided } = require('./utils/assertions');
const { logExtension } = require('./utils/log-as-table');
const prepareData = require('./utils/prepare-data');
const readSrcDocFile = require('./utils/read-srcdoc-file');
module.exports.command = 'create';
module.exports.desc = 'Create an extension';
module.exports.builder = yargs => {
    return yargs
        .option('id', { type: 'string', describe: 'Extension id' })
        .option('name', { type: 'string', describe: 'Extension name' })
        .option('management-token', {
        alias: 'mt',
        type: 'string',
        describe: 'Contentful management API token'
    })
        .option('space-id', { type: 'string', describe: 'Space id' })
        .option('environment-id', { type: 'string', describe: 'Environment id' })
        .option('field-types', { type: 'array', describe: 'Field types' })
        .option('descriptor', {
        type: 'string',
        describe: 'Path to an extension descriptor file'
    })
        .option('src', { type: 'string', describe: 'URL to extension bundle' })
        .option('srcdoc', { type: 'string', describe: 'Path to extension bundle' })
        .option('sidebar', {
        type: 'boolean',
        // We set the default to undefined so the descriptor file value will be
        // used instead of arg value unless explicitly passed in
        default: undefined,
        describe: 'Render the extension in the sidebar'
    })
        .option('installation-parameters', {
        type: 'string',
        describe: 'JSON string of installation parameter key-value pairs'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog(copyright);
};
function createExtension(environment, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const extensionData = { extension: data.extension };
        if (data.parameters) {
            extensionData.parameters = data.parameters;
        }
        const createPromise = data.id
            ? environment.createUiExtensionWithId(data.id, extensionData)
            : environment.createUiExtension(extensionData);
        const extension = yield createPromise;
        return extension;
    });
}
module.exports.createExtension = createExtension;
function createExtensionHandler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield prepareData(argv);
        yield assertExtensionValuesProvided(data, 'create');
        if (data.extension.srcdoc) {
            yield readSrcDocFile(data.extension);
        }
        const { managementToken, activeSpaceId, activeEnvironmentId } = argv.context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'extension-create',
            headers: getHeadersFromOption(argv.header)
        });
        const space = yield client.getSpace(activeSpaceId);
        const environment = yield space.getEnvironment(activeEnvironmentId);
        const extension = yield createExtension(environment, data);
        success(`${successEmoji} Successfully created extension:\n`);
        logExtension(extension, activeSpaceId, activeEnvironmentId);
    });
}
module.exports.createExtensionHandler = createExtensionHandler;
module.exports.handler = handle(createExtensionHandler);
