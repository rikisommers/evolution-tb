"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { kebabCase } = require('lodash');
const { ValidationError } = require('../../../utils/error');
function assertHasRequiredProperties(extension, required) {
    return __awaiter(this, void 0, void 0, function* () {
        const missingRequiredFields = required.reduce((missing, field) => {
            return Object.prototype.hasOwnProperty.call(extension, field)
                ? missing
                : [...missing, field];
        }, []);
        if (missingRequiredFields.length) {
            throw new ValidationError(`Missing required properties: ${missingRequiredFields
                .map(kebabCase)
                .join(', ')}`);
        }
    });
}
function assertHasOneProperty(extension, list) {
    return __awaiter(this, void 0, void 0, function* () {
        const filtered = list.filter(prop => {
            return (Object.prototype.hasOwnProperty.call(extension, prop) && !extension.prop);
        });
        if (filtered.length === list.length || filtered.length === 0) {
            throw new ValidationError(`Must contain exactly one of: ${list.join(', ')}`);
        }
    });
}
function assertForceOrCorrectVersionProvided(data, targetVersion) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!data.force && !data.version) {
            throw new ValidationError('Please provide current version or use the --force flag');
        }
        if (data.version && data.version !== targetVersion) {
            throw new ValidationError('Version provided does not match current resource version');
        }
    });
}
module.exports.assertForceOrCorrectVersionProvided =
    assertForceOrCorrectVersionProvided;
function assertExtensionValuesProvided(data, action) {
    return __awaiter(this, void 0, void 0, function* () {
        if (action === 'update') {
            yield assertHasRequiredProperties(data, ['id']);
        }
        yield assertHasRequiredProperties(data.extension, ['name']);
        yield assertHasOneProperty(data.extension, ['src', 'srcdoc']);
    });
}
module.exports.assertExtensionValuesProvided = assertExtensionValuesProvided;
