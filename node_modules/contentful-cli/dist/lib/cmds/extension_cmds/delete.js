"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { handleAsyncError: handle } = require('../../utils/async');
const { createManagementClient } = require('../../utils/contentful-clients');
const { copyright } = require('../../utils/copyright');
const { successEmoji } = require('../../utils/emojis');
const { getHeadersFromOption } = require('../../utils/headers');
const { success } = require('../../utils/log');
const { assertForceOrCorrectVersionProvided } = require('./utils/assertions');
module.exports.command = 'delete';
module.exports.desc = 'Delete an extension';
module.exports.builder = yargs => {
    return yargs
        .option('id', { type: 'string', demand: true, describe: 'Extension id' })
        .option('management-token', {
        alias: 'mt',
        type: 'string',
        describe: 'Contentful management API token'
    })
        .option('space-id', { type: 'string', describe: 'Space id' })
        .option('environment-id', { type: 'string', describe: 'Environment id' })
        .option('version', {
        type: 'number',
        describe: 'Current version of the extension for optimistic locking'
    })
        .option('force', {
        type: 'boolean',
        describe: 'Force operation without explicit version'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog(copyright);
};
function deleteExtension(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, id } = argv;
        const { managementToken, activeSpaceId, activeEnvironmentId } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'extension-delete',
            headers: getHeadersFromOption(argv.header)
        });
        const space = yield client.getSpace(activeSpaceId);
        const environment = yield space.getEnvironment(activeEnvironmentId);
        const extension = yield environment.getUiExtension(id);
        yield assertForceOrCorrectVersionProvided(argv, extension.sys.version);
        yield extension.delete();
        success(`${successEmoji} Successfully deleted extension with ID ${id}`);
    });
}
module.exports.deleteExtension = deleteExtension;
module.exports.handler = handle(deleteExtension);
