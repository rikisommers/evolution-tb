"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { handleAsyncError: handle } = require('../../utils/async');
const { success } = require('../../utils/log');
const { successEmoji } = require('../../utils/emojis.js');
const { setContext, emptyContext, storeRuntimeConfig } = require('../../context');
module.exports.command = 'remove';
module.exports.desc = 'Removes a config from ~/.contentfulrc.json';
module.exports.builder = yargs => {
    return yargs
        .usage('Usage: contentful config remove [options]')
        .option('management-token', {
        alias: 'mt',
        describe: 'Remove the API management token from the config',
        type: 'boolean',
        default: false
    })
        .option('active-space-id', {
        alias: 'as',
        describe: 'Remove the active space id from the config',
        type: 'boolean',
        default: false
    })
        .option('active-environment-id', {
        alias: 'ae',
        describe: 'Remove the active environment id from the config'
    })
        .option('insecure', {
        describe: 'Use HTTP instead of TLS (default: false)',
        hidden: true,
        type: 'boolean'
    })
        .option('host', {
        alias: 'ho',
        describe: 'Remove the management host from the config'
    })
        .option('proxy', {
        alias: 'p',
        describe: 'Remove the proxy from the config',
        type: 'boolean',
        default: false
    })
        .option('raw-proxy', {
        alias: 'rp',
        describe: 'Pass proxy config as raw config instead of creating a httpsAgent',
        type: 'boolean'
    })
        .option('all', {
        describe: 'Remove all the things from the config',
        type: 'boolean',
        default: false
    });
};
const removeHandler = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    let options = Object.assign({}, argv.context);
    if (argv.all) {
        options = {};
    }
    else {
        const contextKeys = [
            'managementToken',
            'activeSpaceId',
            'activeEnvironmentId',
            'insecure',
            'host',
            'proxy',
            'rawProxy'
        ];
        contextKeys.forEach(key => argv[key] && delete options[key]);
    }
    emptyContext();
    setContext(options);
    yield storeRuntimeConfig();
    success(`${successEmoji} config removed successfully`);
});
module.exports.removeHandler = removeHandler;
module.exports.handler = handle(removeHandler);
