"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { handleAsyncError: handle } = require('../../utils/async');
const emojic = require('emojic');
const { frame } = require('../../utils/text');
const { success } = require('../../utils/log');
const { proxyObjectToString } = require('../../utils/proxy');
module.exports.command = 'list';
module.exports.desc = 'List all your configs';
module.exports.builder = yargs => {
    return yargs.usage('Usage: contentful config list');
};
module.exports.aliases = ['ls'];
const listHandler = ({ context }) => __awaiter(void 0, void 0, void 0, function* () {
    const configList = Object.keys(context).map(key => {
        if (key === 'proxy') {
            return `${emojic.gear}  ${key}: ${proxyObjectToString(context[key])}`;
        }
        else {
            return `${emojic.gear}  ${key}: ${context[key]}`;
        }
    });
    success(frame(configList.join('\n')));
});
module.exports.listHandler = listHandler;
module.exports.handler = handle(listHandler);
