"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSpace = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const create_1 = require("../space_cmds/create");
const import_1 = require("../space_cmds/import");
const use_1 = require("../space_cmds/use");
const content_json_1 = __importDefault(require("./content.json"));
// TODO: use proper context types
const getSpace = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const { newSpace } = yield inquirer_1.default.prompt([
        {
            type: 'list',
            name: 'newSpace',
            message: 'Do you want to create a new space or use an existing one?',
            choices: [
                {
                    name: 'Create new space',
                    value: true
                },
                {
                    name: 'Use existing space',
                    value: false
                }
            ]
        }
    ]);
    let space;
    if (newSpace) {
        const { spaceName, content } = yield inquirer_1.default.prompt([
            {
                type: 'input',
                name: 'spaceName',
                message: 'What should be the name for the new created space?',
                validate: name => name !== '' || 'Space name is required'
            },
            {
                type: 'confirm',
                name: 'content',
                message: ({ spaceName }) => `Do you want to have example content in ${spaceName}?`
            }
        ]);
        space = yield (0, create_1.spaceCreate)({
            context,
            name: spaceName
        });
        if (content) {
            yield (0, import_1.importSpace)({
                context: Object.assign(Object.assign({}, context), { activeSpaceId: space.sys.id }),
                content: content_json_1.default
            });
        }
        else {
            // TODO: log message about adding content model and content
        }
    }
    else {
        space = yield (0, use_1.spaceUse)({ context, successMsg: false });
    }
    return space;
});
exports.getSpace = getSpace;
