"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Table = require('cli-table3');
const { createManagementClient } = require('../../utils/contentful-clients');
const { log } = require('../../utils/log');
const { handleAsyncError: handle } = require('../../utils/async');
const { getId } = require('../../utils/helpers');
const { getHeadersFromOption } = require('../../utils/headers');
const { copyright } = require('../../utils/copyright');
module.exports.command = 'get';
module.exports.desc = 'Show a content type';
module.exports.builder = yargs => {
    return yargs
        .option('id', { type: 'string', demand: true, describe: 'Content Type id' })
        .option('space-id', { alias: 's', type: 'string', describe: 'Space id' })
        .option('management-token', {
        alias: 'mt',
        type: 'string',
        describe: 'Contentful management API token'
    })
        .option('environment-id', {
        alias: 'e',
        type: 'string',
        describe: 'Environment id'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog(copyright);
};
function ctShow(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const contentTypeId = getId(argv);
        const { managementToken, activeSpaceId, activeEnvironmentId } = argv.context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'content_type-get',
            headers: getHeadersFromOption(argv.header)
        });
        const space = yield client.getSpace(activeSpaceId);
        const environment = yield space.getEnvironment(activeEnvironmentId);
        const result = yield environment.getContentType(contentTypeId);
        const { sys, name, displayField, fields } = result;
        const table = new Table({
            head: ['CT Property', 'CT Value']
        });
        table.push(['ID', sys.id]);
        table.push(['Name', name]);
        table.push(['Display Field', displayField]);
        log(table.toString());
        const fieldsTable = new Table({
            head: ['*', 'Field ID', 'Field Name', 'Field Type', 'Required']
        });
        fields.forEach(({ id, name, type, required }) => {
            const isDisplayField = id === displayField;
            const displayFieldIndicator = isDisplayField ? '*' : '';
            fieldsTable.push([displayFieldIndicator, id, name, type, required]);
        });
        log(fieldsTable.toString());
    });
}
module.exports.handler = handle(ctShow);
