"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { resolve } = require('path');
const { tmpdir } = require('os');
const spaceImport = require('contentful-import');
const { confirmation } = require('../../utils/actions');
const { handleAsyncError: handle } = require('../../utils/async');
const { createManagementClient } = require('../../utils/contentful-clients');
const { successEmoji } = require('../../utils/emojis');
const { getLatestGitHubRelease } = require('../../utils/github');
const { log, success } = require('../../utils/log');
const { highlightStyle, warningStyle } = require('../../utils/styles');
const { getHeadersFromOption } = require('../../utils/headers');
const { copyright } = require('../../utils/copyright');
const { readFileP } = require('../../utils/fs');
module.exports.command = 'seed';
module.exports.desc =
    'Seed a content model and content based on given templates';
module.exports.builder = yargs => {
    return yargs
        .usage('Usage: contentful space seed --template blog')
        .option('template', {
        alias: 't',
        describe: 'The template to apply on your Space. All possible options are listed here: https://github.com/contentful/content-models',
        demandOption: true,
        nargs: 1
    })
        .option('space-id', {
        alias: 's',
        describe: 'ID of the Space to seed the data to',
        nargs: 1
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('yes', {
        describe: 'Skip the confirmation question'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog(copyright);
};
function spaceSeed({ context, yes, template, feature = 'space-seed', header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId, host, proxy, rawProxy } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature,
            proxy,
            rawProxy,
            headers: getHeadersFromOption(header)
        });
        const space = yield client.getSpace(activeSpaceId);
        if (!yes) {
            log(`You are about to apply changes to your ${highlightStyle(space.name)} (${highlightStyle(space.sys.id)}) Space. Existing content might be overwritten.`);
            log();
            const confirm = yield confirmation('Do you want to apply the changes to your Space now?');
            log();
            if (!confirm) {
                log(warningStyle(`User aborted the population of structure and content to the Space.`));
                return;
            }
        }
        const destination = resolve(tmpdir(), '.contentful', 'content-models');
        yield getLatestGitHubRelease('contentful/content-models', destination).run();
        const contentFile = resolve(destination, template, 'contentful-export.json');
        const contentData = yield readFileP(contentFile, 'utf8');
        const content = JSON.parse(contentData);
        log();
        yield spaceImport({
            content,
            spaceId: activeSpaceId,
            host,
            managementToken,
            managementFeature: feature || 'space-seed'
        });
        log();
        success(`${successEmoji} The Content model was applied to your ${highlightStyle(space.name)} (${highlightStyle(space.sys.id)}) Space.`);
    });
}
module.exports.spaceSeed = spaceSeed;
module.exports.handler = handle(spaceSeed);
