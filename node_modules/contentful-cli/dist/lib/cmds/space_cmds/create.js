"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.spaceCreate = exports.builder = exports.desc = exports.command = void 0;
const log_1 = __importDefault(require("../../utils/log"));
const async_1 = require("../../utils/async");
const contentful_clients_1 = require("../../utils/contentful-clients");
const use_1 = require("./use");
const events_1 = require("../../core/events");
const scopes_1 = require("../../core/events/scopes");
const styles_1 = require("../../utils/styles");
const actions_1 = require("../../utils/actions");
const intents_1 = __importDefault(require("../../core/event-handlers/intents"));
const logging_1 = __importDefault(require("../../core/event-handlers/logging"));
const create_space_handler_1 = __importDefault(require("../../core/event-handlers/intents/create-space-handler"));
const create_space_handler_2 = __importDefault(require("../../core/event-handlers/logging/create-space-handler"));
const aborted_error_1 = require("../../utils/aborted-error");
const headers_1 = require("../../utils/headers");
const copyright_1 = require("../../utils/copyright");
exports.command = 'create';
exports.desc = 'Create a space';
const builder = (yargs) => {
    return yargs
        .usage("Usage: contentful space create --name 'Your Space Name'")
        .option('name', {
        alias: 'n',
        describe: 'Name of the space to create',
        demandOption: true
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('organization-id', {
        alias: 'org',
        describe: 'Organization owning the new space'
    })
        .option('yes', {
        alias: 'y',
        describe: 'Confirm space creation without prompt, be aware this may result in extra monthly charges depend on your subscription'
    })
        .option('default-locale', {
        alias: 'l',
        describe: 'The default locale of the new space',
        type: 'string'
    })
        .option('use', {
        alias: 'u',
        describe: 'Use the created space as default space when the --space-id is skipped.',
        type: 'boolean'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog(copyright_1.copyright);
};
exports.builder = builder;
const spaceCreate = function (argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, name, defaultLocale, yes, use, header, feature = 'space-create' } = argv;
        const { managementToken } = context;
        let { organizationId = '' } = argv;
        const client = yield (0, contentful_clients_1.createManagementClient)({
            feature,
            accessToken: managementToken,
            headers: (0, headers_1.getHeadersFromOption)(argv.header)
        });
        log_1.default.log((0, styles_1.warningStyle)(`Please be aware that adding new spaces to your subscription,
beyond the free ‘Micro’ space included in each subscription,
will result in extra monthly charges.
More information on available space types and their prices can be found on
the Pricing page: https://www.contentful.com/pricing/?faq_category=payments&faq=what-type-of-spaces-can-i-have#what-type-of-spaces-can-i-have`));
        let confirm = false;
        if (!yes) {
            confirm = yield (0, actions_1.confirmation)(`Do you want to confirm the space creation?`);
        }
        else {
            confirm = true;
        }
        log_1.default.log();
        if (!confirm) {
            log_1.default.log((0, styles_1.warningStyle)(`Space creation aborted.`));
            throw new aborted_error_1.AbortedError();
        }
        const intentSystem = new intents_1.default();
        intentSystem.addHandler((0, create_space_handler_1.default)());
        const loggingSystem = new logging_1.default(log_1.default);
        loggingSystem.addHandler(create_space_handler_2.default);
        const eventSystem = new events_1.EventSystem();
        eventSystem.attachSubsystem(intentSystem);
        eventSystem.attachSubsystem(loggingSystem);
        const dispatcher = eventSystem.dispatcher(scopes_1.CREATE_SPACE_HANDLER);
        if (!organizationId) {
            const result = yield client.getOrganizations();
            if (result.items.length > 1) {
                dispatcher.dispatch('MULTIPLE_ORG_MEMBERSHIP');
                const organizationChoices = result.items
                    .sort((a, b) => a.name.localeCompare(b.name))
                    .map(organization => ({
                    name: `${organization.name} (${organization.sys.id})`,
                    value: organization.sys.id
                }), {});
                organizationId = yield dispatcher.intent('SELECT_ORG', {
                    organizations: organizationChoices
                });
            }
        }
        const space = yield client.createSpace({
            name,
            defaultLocale
        }, organizationId);
        if (use) {
            yield (0, use_1.spaceUse)({ context, spaceId: space.sys.id, header });
        }
        dispatcher.dispatch('SPACE_CREATED', { space });
        return space;
    });
};
exports.spaceCreate = spaceCreate;
exports.handler = (0, async_1.handleAsyncError)(exports.spaceCreate);
