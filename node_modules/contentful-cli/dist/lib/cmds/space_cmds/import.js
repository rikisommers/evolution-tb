"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.importSpace = exports.builder = exports.desc = exports.command = void 0;
const contentful_import_1 = __importDefault(require("contentful-import"));
const async_1 = require("../../utils/async");
const proxy_1 = require("../../utils/proxy");
const package_json_1 = require("../../../package.json");
const log_1 = require("../../utils/log");
const headers_1 = require("../../utils/headers");
const copyright_1 = require("../../utils/copyright");
exports.command = 'import';
exports.desc = 'import a space';
const builder = (yargs) => {
    return yargs
        .usage('Usage: contentful space import --content-file <file>')
        .option('space-id', {
        describe: 'ID of the destination space',
        type: 'string'
    })
        .option('environment-id', {
        describe: 'ID the environment in the destination space',
        type: 'string',
        demand: false
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('content-file', {
        describe: 'JSON file that contains data to import into a space',
        type: 'string',
        demand: true
    })
        .option('content-model-only', {
        describe: 'Import only content types',
        type: 'boolean',
        default: false
    })
        .option('skip-content-model', {
        describe: 'Skip importing content types and locales',
        type: 'boolean',
        default: false
    })
        .option('skip-locales', {
        describe: 'Skip importing locales',
        type: 'boolean',
        default: false
    })
        .option('skip-content-publishing', {
        describe: 'Skips content publishing. Creates content but does not publish it',
        type: 'boolean',
        default: false
    })
        .option('update', {
        describe: 'Update entries if they already exist',
        type: 'boolean',
        hidden: true
    })
        .option('error-log-file', {
        describe: 'Full path to the error log file',
        type: 'string'
    })
        .option('host', {
        describe: 'Management API host',
        type: 'string'
    })
        .option('proxy', {
        describe: 'Proxy configuration in HTTP auth format: [http|https]://host:port or [http|https]://user:password@host:port',
        type: 'string'
    })
        .option('timeout', {
        describe: 'Timeout in milliseconds for API calls',
        type: 'number',
        default: 20000
    })
        .option('retry-limit', {
        describe: 'How many times to retry before an operation fails',
        type: 'number',
        default: 10
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .config('config', 'An optional configuration JSON file containing all the options for a single run')
        .epilog(copyright_1.copyright);
};
exports.builder = builder;
const importSpace = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    if (argv.update !== undefined) {
        (0, log_1.warning)('The --update option has been deprecated and will be ignored.');
    }
    const { context, feature = 'space-import' } = argv;
    const { managementToken, activeSpaceId, activeEnvironmentId, host, proxy, rawProxy } = context;
    const options = Object.assign(Object.assign({}, argv), { spaceId: activeSpaceId, environmentId: activeEnvironmentId, managementApplication: `contentful.cli/${package_json_1.version}`, managementFeature: feature, managementToken,
        host, headers: (0, headers_1.getHeadersFromOption)(argv.header) });
    if (proxy) {
        // contentful-import and contentful-export
        // expect a string for the proxy config
        // and create agents from it
        if (typeof proxy !== 'string') {
            options.proxy = (0, proxy_1.proxyObjectToString)(proxy);
        }
        else {
            options.proxy = proxy;
        }
        options.rawProxy = rawProxy;
    }
    return (0, contentful_import_1.default)(options);
});
exports.importSpace = importSpace;
exports.handler = (0, async_1.handleAsyncError)(exports.importSpace);
