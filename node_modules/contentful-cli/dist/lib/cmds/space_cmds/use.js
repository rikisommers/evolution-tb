"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.spaceUse = exports.builder = exports.aliases = exports.desc = exports.command = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const inquirer_autocomplete_prompt_1 = __importDefault(require("inquirer-autocomplete-prompt"));
const contentful_clients_1 = require("../../utils/contentful-clients");
const context_1 = require("../../context");
const async_1 = require("../../utils/async");
const log_1 = require("../../utils/log");
const pagination_1 = __importDefault(require("../../utils/pagination"));
const styles_1 = require("../../utils/styles");
const headers_1 = require("../../utils/headers");
const copyright_1 = require("../../utils/copyright");
exports.command = 'use';
exports.desc = 'Sets the default space which every command will use when the --space-id option is skipped.';
exports.aliases = ['u'];
const builder = (yargs) => {
    return yargs
        .usage('Usage: contentful space use')
        .option('space-id', {
        alias: 's',
        describe: 'ID of the Space to use for other commands',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog(copyright_1.copyright);
};
exports.builder = builder;
function showSuccess(space, env = 'master') {
    (0, log_1.success)(`Now using the '${env}' Environment of Space ${(0, styles_1.highlightStyle)(space.name)} (${(0, styles_1.highlightStyle)(space.sys.id)}) when the \`--environment-id\` option is missing.`);
}
function spaceUse({ context, spaceId, header, successMsg = true }) {
    return __awaiter(this, void 0, void 0, function* () {
        inquirer_1.default.registerPrompt('autocomplete', inquirer_autocomplete_prompt_1.default);
        const { managementToken, activeEnvironmentId } = context;
        const client = yield (0, contentful_clients_1.createManagementClient)({
            accessToken: managementToken,
            feature: 'space-use',
            headers: (0, headers_1.getHeadersFromOption)(header)
        });
        if (spaceId) {
            const space = yield client.getSpace(spaceId);
            yield (0, context_1.setContext)({
                activeSpaceId: space.sys.id,
                activeEnvironmentId
            });
            yield (0, context_1.storeRuntimeConfig)();
            if (successMsg)
                showSuccess(space, activeEnvironmentId);
            return space;
        }
        const spacesResult = yield (0, pagination_1.default)({ client, method: 'getSpaces' });
        const spaceChoices = spacesResult.items
            .sort((a, b) => a.name.localeCompare(b.name))
            .map(space => ({
            name: `${space.name} (${space.sys.id})`,
            value: space.sys.id
        }), {});
        const answersSpaceSelection = yield inquirer_1.default.prompt([
            {
                type: 'autocomplete',
                name: 'spaceId',
                prefix: 'ðŸ‘€',
                message: 'Please select a space:',
                source: (_, input = '') => spaceChoices.filter(space => space.name.includes(input))
            }
        ]);
        const space = yield client.getSpace(answersSpaceSelection.spaceId);
        yield (0, context_1.setContext)({
            activeSpaceId: space.sys.id,
            activeEnvironmentId
        });
        yield (0, context_1.storeRuntimeConfig)();
        if (successMsg)
            showSuccess(space, activeEnvironmentId);
        return space;
    });
}
exports.spaceUse = spaceUse;
exports.handler = (0, async_1.handleAsyncError)(spaceUse);
