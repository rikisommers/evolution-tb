"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Promise = require('bluebird');
const logging = require('../../../utils/log');
const { handleAsyncError: handle } = require('../../../utils/async');
const { createManagementClient } = require('../../../utils/contentful-clients');
const { getHeadersFromOption } = require('../../../utils/headers');
const { copyright } = require('../../../utils/copyright');
module.exports.command = 'create';
module.exports.desc = 'Create an environment';
module.exports.builder = yargs => {
    return yargs
        .usage("Usage: contentful space environment create --name 'Your Environment Name'")
        .option('environment-id', {
        alias: 'e',
        describe: 'Id of the environment to create',
        demandOption: true
    })
        .option('name', {
        alias: 'n',
        describe: 'Name of the environment to create',
        demandOption: true
    })
        .option('source', {
        alias: 'src',
        describe: 'ID of the source environment to create the new environment from',
        type: 'string'
    })
        .option('space-id', {
        alias: 's',
        describe: 'ID of the space that the environment will belong to',
        type: 'string'
    })
        .option('await-processing', {
        alias: 'w',
        describe: 'Wait until the environment is processed and ready',
        type: 'boolean',
        default: false
    })
        .option('processing-timeout', {
        alias: 't',
        describe: 'Await processing times out after specified number of minutes (only is applied if await-processing is set)',
        type: 'number',
        default: 5
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog([
        'See more at:',
        'https://github.com/contentful/contentful-cli/tree/master/docs/space/environment/create',
        copyright
    ].join('\n'));
};
function checkAwaitProcessing(space, environment, timeoutInMinutes) {
    return __awaiter(this, void 0, void 0, function* () {
        const DELAY = 3000;
        const timeoutInMilliseconds = Math.ceil(timeoutInMinutes * 60 * 1000);
        const MAX_NUMBER_OF_TRIES = Math.ceil(timeoutInMilliseconds / DELAY);
        let count = 0;
        logging.log('Waiting for processing...');
        while (count < MAX_NUMBER_OF_TRIES) {
            const status = (yield space.getEnvironment(environment.sys.id)).sys.status
                .sys.id;
            if (status === 'ready' || status === 'failed') {
                if (status === 'ready') {
                    logging.success(`Successfully processed new environment ${environment.name} (${environment.sys.id})`);
                }
                else {
                    logging.error('Environment creation failed');
                }
                break;
            }
            yield Promise.delay(DELAY);
            count++;
        }
    });
}
function environmentCreate({ context, name, source, awaitProcessing, processingTimeout, environmentId, header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'space-environment-create',
            headers: getHeadersFromOption(header)
        });
        const space = yield client.getSpace(activeSpaceId);
        const options = {};
        if (name) {
            options.name = name;
        }
        const environment = source
            ? yield space.createEnvironmentWithId(environmentId, options, source)
            : yield space.createEnvironmentWithId(environmentId, options);
        logging.success(`Successfully created environment ${environment.name} (${environment.sys.id}) ${source ? `with source ${source}` : ''}`);
        if (awaitProcessing) {
            yield checkAwaitProcessing(space, environment, processingTimeout);
            const status = (yield space.getEnvironment(environment.sys.id)).sys.status
                .sys.id;
            if (!(status === 'ready' || status === 'failed')) {
                logging.log(`The environment is not ready and the awaiting processing time is over`);
            }
        }
        return environment;
    });
}
module.exports.environmentCreate = environmentCreate;
module.exports.handler = handle(environmentCreate);
