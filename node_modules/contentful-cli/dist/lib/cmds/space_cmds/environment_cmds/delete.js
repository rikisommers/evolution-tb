"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logging = require('../../../utils/log');
const { handleAsyncError: handle } = require('../../../utils/async');
const { createManagementClient } = require('../../../utils/contentful-clients');
const { getHeadersFromOption } = require('../../../utils/headers');
const { copyright } = require('../../../utils/copyright');
module.exports.command = 'delete';
module.exports.desc = 'Delete an environment';
module.exports.builder = yargs => {
    return yargs
        .usage("Usage: contentful space environment delete --environment-id 'staging'")
        .option('environment-id', {
        alias: 'e',
        describe: 'Id of the environment to delete',
        demandOption: true
    })
        .option('space-id', {
        alias: 's',
        describe: 'ID of the space that holds the environment',
        type: 'string'
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog([
        'See more at:',
        'https://github.com/contentful/contentful-cli/tree/master/docs/space/environment/delete',
        copyright
    ].join('\n'));
};
function environmentDelete({ context, environmentId, header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'space-environment-delete',
            headers: getHeadersFromOption(header)
        });
        const space = yield client.getSpace(activeSpaceId);
        const environment = yield space.getEnvironment(environmentId);
        yield environment.delete();
        logging.success(`Successfully deleted environment ${environment.name} (${environment.sys.id})`);
        return environment;
    });
}
module.exports.environmentDelete = environmentDelete;
module.exports.handler = handle(environmentDelete);
