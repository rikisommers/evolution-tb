"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const inquirer = require('inquirer');
const { createManagementClient } = require('../../../utils/contentful-clients');
const { setContext, storeRuntimeConfig } = require('../../../context');
const { handleAsyncError: handle } = require('../../../utils/async');
const { success } = require('../../../utils/log');
const paginate = require('../../../utils/pagination');
const { highlightStyle } = require('../../../utils/styles');
const { getHeadersFromOption } = require('../../../utils/headers');
const { copyright } = require('../../../utils/copyright');
module.exports.command = 'use';
module.exports.desc =
    'Sets the default environment which every command will use when the --environment-id option is skipped.';
module.exports.aliases = ['u'];
module.exports.builder = yargs => {
    return yargs
        .usage('Usage: contentful space environment use')
        .option('environment-id', {
        alias: 'e',
        describe: 'ID of the Environment within the currently active Space to use for other commands',
        type: 'string'
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .option('space-id', { alias: 's', type: 'string', describe: 'Space id' })
        .epilog(copyright);
};
function showSuccess(space, environment) {
    success(`Now using Environment ${highlightStyle(environment.name)} (${highlightStyle(environment.sys.id)}) in Space ${highlightStyle(space.name)} (${highlightStyle(space.sys.id)}) when the \`--environment-id\` option is missing.`);
}
function environmentUse({ context, environmentId, header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'space-environment-use',
            headers: getHeadersFromOption(header)
        });
        const space = yield client.getSpace(activeSpaceId);
        if (environmentId) {
            const environment = yield space.getEnvironment(environmentId);
            yield setContext({
                activeEnvironmentId: environment.sys.id
            });
            yield storeRuntimeConfig();
            showSuccess(space, environment);
            return environment;
        }
        const environmentsResult = yield paginate({
            client: space,
            method: 'getEnvironments'
        });
        const environmentsChoices = environmentsResult.items
            .sort((a, b) => a.name.localeCompare(b.name))
            .map(environment => ({
            name: `${environment.name} (${environment.sys.id})`,
            value: environment.sys.id
        }), {})
            .concat([new inquirer.Separator()]);
        const answersEnvironmentSelection = yield inquirer.prompt([
            {
                type: 'list',
                name: 'environmentId',
                message: 'Please select an environment:',
                choices: environmentsChoices
            }
        ]);
        const environment = yield space.getEnvironment(answersEnvironmentSelection.environmentId);
        yield setContext({
            activeEnvironmentId: environment.sys.id
        });
        yield storeRuntimeConfig();
        showSuccess(space, environment);
        return environment;
    });
}
module.exports.environmentUse = environmentUse;
module.exports.handler = handle(environmentUse);
