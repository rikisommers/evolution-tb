"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Table = require('cli-table3');
const { handleAsyncError: handle } = require('../../../utils/async');
const { createManagementClient } = require('../../../utils/contentful-clients');
const { getHeadersFromOption } = require('../../../utils/headers');
const { log } = require('../../../utils/log');
const paginate = require('../../../utils/pagination');
module.exports.command = 'list';
module.exports.desc = 'List your space aliases';
module.exports.builder = yargs => {
    return yargs
        .usage('Usage: contentful space alias list')
        .option('space-id', {
        alias: 's',
        describe: 'ID of the space the alias will belong to',
        type: 'string'
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    });
};
module.exports.aliases = ['ls'];
module.exports.environmentAliasList = function environmentAliasList({ context, header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'space-environment-alias-list',
            headers: getHeadersFromOption(header)
        });
        const space = yield client.getSpace(activeSpaceId);
        const result = yield paginate({
            client: space,
            method: 'getEnvironmentAliases'
        });
        const aliases = result.items.sort((a, b) => a.sys.id.localeCompare(b.sys.id));
        const table = new Table({
            head: ['Alias id', 'Target environment ID']
        });
        aliases.forEach(alias => {
            table.push([alias.sys.id, alias.environment.sys.id]);
        });
        log(table.toString());
    });
};
module.exports.handler = handle(module.exports.environmentAliasList);
