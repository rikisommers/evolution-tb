"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logging = require('../../../utils/log');
const { handleAsyncError: handle } = require('../../../utils/async');
const { createManagementClient } = require('../../../utils/contentful-clients');
const { getHeadersFromOption } = require('../../../utils/headers');
module.exports.command = 'update';
module.exports.desc = 'Update an environment alias';
module.exports.builder = yargs => {
    return yargs
        .usage('Usage: contentful space alias update --alias-id master --target-environment-id staging')
        .option('alias-id', {
        alias: 'a',
        describe: 'Id of the alias to create',
        demandOption: true
    })
        .option('target-environment-id', {
        alias: 'e',
        describe: 'ID of the target environment',
        type: 'string'
    })
        .option('space-id', {
        alias: 's',
        describe: 'ID of the space that the alias will belong to',
        type: 'string'
    })
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    });
};
module.exports.environmentAliasUpdate = function environmentAliasUpdate({ context, aliasId, targetEnvironmentId, header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken, activeSpaceId } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'space-environment-alias-update',
            headers: getHeadersFromOption(header)
        });
        const space = yield client.getSpace(activeSpaceId);
        let alias = yield space.getEnvironmentAlias(aliasId);
        alias.environment.sys.id = targetEnvironmentId;
        alias = yield alias.update();
        logging.success(`Successfully changed the target environment for alias ${alias.sys.id} to ${alias.environment.sys.id}`);
        return alias;
    });
};
module.exports.handler = handle(module.exports.environmentAliasUpdate);
