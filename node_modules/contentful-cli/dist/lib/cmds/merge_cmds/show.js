"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChangesetAndTargetContentType = void 0;
const app_action_utils_1 = require("@contentful/app-action-utils");
const chalk_1 = __importDefault(require("chalk"));
const listr_1 = __importDefault(require("listr"));
const app_actions_config_1 = require("../../utils/app-actions-config");
const async_1 = require("../../utils/async");
const content_type_api_helper_1 = require("../../utils/merge/content-type-api-helper");
const errors_1 = require("../../utils/merge/errors");
const prepare_merge_command_1 = require("../../utils/merge/prepare-merge-command");
const print_changeset_messages_1 = require("../../utils/merge/print-changeset-messages");
module.exports.command = 'show';
module.exports.desc = 'Show diff between two environments';
module.exports.builder = (yargs) => {
    return yargs
        .usage('Usage: contentful merge show')
        .option('source-environment-id', {
        alias: 'se',
        type: 'string',
        demandOption: true,
        describe: 'Source environment id'
    })
        .option('target-environment-id', {
        alias: 'te',
        type: 'string',
        demandOption: true,
        describe: 'Target environment id'
    })
        .option('yes', {
        alias: 'y',
        describe: 'Confirm Merge app installation without prompt'
    });
};
const getChangesetAndTargetContentType = ({ client, activeSpaceId, host, appDefinitionId, sourceEnvironmentId, targetEnvironmentId }) => __awaiter(void 0, void 0, void 0, function* () {
    const appActionCall = (0, app_action_utils_1.callAppAction)({
        api: client,
        appDefinitionId,
        appActionId: (0, app_actions_config_1.getAppActionId)('create-changeset', host),
        parameters: {
            sourceEnvironmentId,
            targetEnvironmentId
        },
        additionalParameters: {
            spaceId: activeSpaceId,
            environmentId: targetEnvironmentId
        }
    });
    const [targetContentType, appActionResult] = yield Promise.allSettled([
        content_type_api_helper_1.ContentTypeApiHelper.getAll({
            client,
            environmentId: targetEnvironmentId,
            spaceId: activeSpaceId
        }),
        appActionCall
    ]);
    if (targetContentType.status === 'rejected' ||
        appActionResult.status === 'rejected') {
        throw new Error(errors_1.mergeErrors['ErrorInDiffCreation']);
    }
    const { result } = appActionResult.value;
    if ((0, app_action_utils_1.isResultWithError)(result)) {
        if (result.errorMessage === 'PollTimeout') {
            throw new Error(errors_1.mergeErrors['ShowPollTimeout']);
        }
        throw new Error(result.errorMessage);
    }
    const { items: changeset } = result.message.changeset;
    return {
        targetContentType: targetContentType.value,
        changeset: changeset
    };
});
exports.getChangesetAndTargetContentType = getChangesetAndTargetContentType;
const showEnvironmentChangeset = ({ context, sourceEnvironmentId, targetEnvironmentId, yes = false }) => __awaiter(void 0, void 0, void 0, function* () {
    const { activeSpaceId, host, client, mergeAppId } = yield (0, prepare_merge_command_1.prepareMergeCommand)({
        context,
        sourceEnvironmentId,
        targetEnvironmentId,
        yes
    });
    const asyncOperations = yield new listr_1.default([
        {
            title: (0, chalk_1.default) `Create diff for source: {bold.yellow ${sourceEnvironmentId}} and target: {bold.yellow ${targetEnvironmentId}}`,
            task: (ctx, task) => __awaiter(void 0, void 0, void 0, function* () {
                const { targetContentType, changeset } = yield (0, exports.getChangesetAndTargetContentType)({
                    client,
                    activeSpaceId,
                    host: host,
                    appDefinitionId: mergeAppId,
                    sourceEnvironmentId,
                    targetEnvironmentId
                });
                // We show only content type changes for now.
                // This filter can be removed once we support editor interfaces.
                const contentTypeChangeset = changeset.filter(changesetItem => changesetItem.entity.sys.linkType === 'ContentType');
                task.title = (0, chalk_1.default) `ðŸŽ‰ Created diff for source: {bold.yellow ${sourceEnvironmentId}} and target: {bold.yellow ${targetEnvironmentId}}`;
                ctx.output = (0, print_changeset_messages_1.printChangesetMessages)(targetContentType, contentTypeChangeset);
            })
        }
    ]).run({ output: '' });
    console.log('\n');
    console.log(asyncOperations.output);
});
module.exports.handler = (0, async_1.handleAsyncError)(showEnvironmentChangeset);
