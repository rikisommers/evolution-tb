"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Table = require('cli-table3');
const { handleAsyncError: handle } = require('../../utils/async');
const { createManagementClient } = require('../../utils/contentful-clients');
const { copyright } = require('../../utils/copyright');
const { getHeadersFromOption } = require('../../utils/headers');
const { log } = require('../../utils/log');
const paginate = require('../../utils/pagination');
module.exports.command = 'list';
module.exports.desc = 'List your organizations';
module.exports.builder = yargs => {
    return yargs
        .usage('Usage: contentful organization list')
        .option('management-token', {
        alias: 'mt',
        describe: 'Contentful management API token',
        type: 'string'
    })
        .option('header', {
        alias: 'H',
        type: 'string',
        describe: 'Pass an additional HTTP Header'
    })
        .epilog([
        'See more at:',
        'https://github.com/contentful/contentful-cli/tree/master/docs/organization/list',
        copyright
    ].join('\n'));
};
module.exports.aliases = ['ls'];
function organizationList({ context, header }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { managementToken } = context;
        const client = yield createManagementClient({
            accessToken: managementToken,
            feature: 'organization-list',
            headers: getHeadersFromOption(header)
        });
        const result = yield paginate({ client, method: 'getOrganizations' });
        const organizations = result.items.sort((a, b) => a.name.localeCompare(b.name));
        const table = new Table({
            head: ['Organization name', 'Organization id']
        });
        organizations.forEach(({ sys, name }) => {
            table.push([name, sys.id]);
        });
        log(table.toString());
    });
}
module.exports.organizationList = organizationList;
module.exports.handler = handle(organizationList);
